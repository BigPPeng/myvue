{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      loginForm: {\n        userName: \"\",\n        passWord: \"\",\n        radio: 3\n      },\n      loginRules: {\n        userName: [{\n          required: true,\n          message: \"用户名是必填项\",\n          trigger: \"blur\"\n        },\n        //必填项\n        {\n          min: 5,\n          max: 12,\n          message: \"长度在 5 到 12个字符\",\n          trigger: \"blur\"\n        } //字符长度\n        ],\n        passWord: [{\n          required: true,\n          message: \"用户密码是必填项\",\n          trigger: \"blur\"\n        },\n        //必填项\n        {\n          min: 5,\n          max: 12,\n          message: \"长度在 5 ~ 12个字符\",\n          trigger: \"blur\"\n        } //字符长度\n        ]\n      }\n    };\n  },\n  methods: {\n    //重置方法\n    resetLoginForm() {\n      this.$refs.loginFormRef.resetFields();\n    },\n    //登录方法\n    login() {\n      //验证表单是否符合校验规则\n      this.$refs.loginFormRef.validate(async valid => {\n        //如果valid==true,表单符合校验规则,如果valid==false,表单不符合规则,退出方法\n        if (!valid) return;\n        //若表单符合规则,就去调用后台接口\n        const {\n          data: ref\n        } = await this.$http.post(\"login\", this.loginForm);\n        if (ref.flag == \"ok\") {\n          this.$message.success(\"登录成功\");\n          window.sessionStorage.setItem(\"flag\", \"ok\"); // session 放置\n          //跳转到系统主页,通过路由实现\n          this.$router.push({\n            path: \"/HomeView\"\n          });\n          //将user存储到session域空间中\n          window.sessionStorage.setItem(\"user\", ref.user);\n        } else {\n          this.$message.error(\"登录失败\");\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","loginForm","userName","passWord","radio","loginRules","required","message","trigger","min","max","methods","resetLoginForm","$refs","loginFormRef","resetFields","login","validate","valid","ref","$http","post","flag","$message","success","window","sessionStorage","setItem","$router","push","path","user","error"],"sources":["src/components/common/LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"login_container\">\n    <!-- 登录模块 -->\n    <div class=\"login_box\">\n      <!--LoGo头像-->\n      <!--\n         <div class=\"avatar_box\">\n              <img src=\"../assets/logo.png\" alt=\"\">\n        </div>\n        -->\n      <div class=\"movie-title\">\n        <span>现代农业服务平台</span>\n      </div>\n\n      <!--表单-->\n      <el-form\n        ref=\"loginFormRef\"\n        :model=\"loginForm\"\n        :rules=\"loginRules\"\n        class=\"login_form\"\n        label-width=\"0\"\n      >\n        <el-form-item prop=\"username\">\n          <el-input\n            v-model=\"loginForm.username\"\n            prefix-icon=\"el-icon-user\"\n            placeholder=\"请输入用户名\"\n          ></el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\">\n          <el-input\n            v-model=\"loginForm.password\"\n            prefix-icon=\"el-icon-lock\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n          ></el-input>\n        </el-form-item>\n        <el-radio-group v-model=\"radio\">\n          <el-radio :label=\"3\">农户</el-radio>\n          <el-radio :label=\"6\">商家</el-radio>\n          <el-radio :label=\"9\">收购商</el-radio>\n        </el-radio-group>\n        <el-form-item class=\"bts\">\n          <el-button type=\"primary\" @click=\"login()\">登录</el-button>\n          <el-button type=\"info\" @click=\"resetLoginForm()\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      loginForm: {\n        userName: \"\",\n        passWord: \"\",\n        radio: 3\n      },\n      loginRules: {\n        userName: [\n          { required: true, message: \"用户名是必填项\", trigger: \"blur\" }, //必填项\n          { min: 5, max: 12, message: \"长度在 5 到 12个字符\", trigger: \"blur\" }, //字符长度\n        ],\n        passWord: [\n          { required: true, message: \"用户密码是必填项\", trigger: \"blur\" }, //必填项\n          { min: 5, max: 12, message: \"长度在 5 ~ 12个字符\", trigger: \"blur\" }, //字符长度\n        ],\n      },\n    };\n  },\n  methods: {\n    //重置方法\n    resetLoginForm() {\n      this.$refs.loginFormRef.resetFields();\n    },\n    //登录方法\n    login() {\n      //验证表单是否符合校验规则\n      this.$refs.loginFormRef.validate(async (valid) => {\n        //如果valid==true,表单符合校验规则,如果valid==false,表单不符合规则,退出方法\n        if (!valid) return;\n        //若表单符合规则,就去调用后台接口\n        const { data: ref } = await this.$http.post(\"login\", this.loginForm);\n        if (ref.flag == \"ok\") {\n          this.$message.success(\"登录成功\");\n          window.sessionStorage.setItem(\"flag\", \"ok\"); // session 放置\n          //跳转到系统主页,通过路由实现\n          this.$router.push({ path: \"/HomeView\" });\n          //将user存储到session域空间中\n          window.sessionStorage.setItem(\"user\", ref.user);\n        } else {\n          this.$message.error(\"登录失败\");\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n//根节点样式\n.login_container {\n  background-color: #2b4b6b;\n  background-image: url(\"@/assets/1.jpg\");\n  background-size: 100%;\n  background-repeat: no-repeat;\n  height: 100%;\n  width: 100%;\n}\n//登录盒子样式\n.login_box {\n  width: 450px;\n  height: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  .movie-title {\n    font-size: 20px;\n    margin-top: 25px;\n  }\n  /*.avatar_box{*/\n  /*   width: 130px;*/\n  /*   height: 130px;*/\n  /*   border: 1px solid #eee;*/\n  /*   border-radius: 50%;*/\n  /*   padding: 5px;*/\n  /*   //盒子阴影*/\n  /*   box-shadow: 0 0 2px #ddd;*/\n  /*   position: absolute;*/\n  /*   left: 50%;*/\n  /*   transform: translate(-50%,-50%);*/\n  /*   background-color: #0ee;*/\n  /*   //LoGo样式*/\n  /*   img{*/\n  /*     width: 100%;*/\n  /*     height: 100%;*/\n  /*     background-color: #eee;*/\n  /*     border-radius: 50%;*/\n  /*   }*/\n  /* }*/\n}\n//表单样式\n.bts {\n  display: flex;\n  //弹性盒子元素将向行结束位置对齐\n  justify-content: flex-end;\n  padding-top:300px;\n}\n.login_form {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 0 10px;\n  /**\n    border-box 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。\n    也就是说，如果你将一个元素的width设为100px,\n    那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。\n    大多数情况下这使得我们更容易的去设定一个元素的宽高。\n     */\n  box-sizing: border-box;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;EACAA,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;QACAC,KAAA;MACA;MACAC,UAAA;QACAH,QAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QAAA;QACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA;QAAA,CACA;QACAL,QAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QAAA;QACA;UAAAC,GAAA;UAAAC,GAAA;UAAAH,OAAA;UAAAC,OAAA;QAAA;QAAA;MAEA;IACA;EACA;EACAG,OAAA;IACA;IACAC,eAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,WAAA;IACA;IACA;IACAC,MAAA;MACA;MACA,KAAAH,KAAA,CAAAC,YAAA,CAAAG,QAAA,OAAAC,KAAA;QACA;QACA,KAAAA,KAAA;QACA;QACA;UAAAlB,IAAA,EAAAmB;QAAA,eAAAC,KAAA,CAAAC,IAAA,eAAApB,SAAA;QACA,IAAAkB,GAAA,CAAAG,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;UACA;UACA,KAAAC,OAAA,CAAAC,IAAA;YAAAC,IAAA;UAAA;UACA;UACAL,MAAA,CAAAC,cAAA,CAAAC,OAAA,SAAAR,GAAA,CAAAY,IAAA;QACA;UACA,KAAAR,QAAA,CAAAS,KAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}