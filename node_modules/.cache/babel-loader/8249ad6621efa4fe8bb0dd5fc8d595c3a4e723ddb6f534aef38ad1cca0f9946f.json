{"ast":null,"code":"export default {\n  data() {\n    return {\n      //电影类别\n      typeOptions: [],\n      //批量删除是否禁用\n      isDisable: true,\n      //对话框标题\n      title: '',\n      //对话框\n      open: false,\n      //多选框选中id与username\n      ids: [],\n      names: [],\n      formRules: {\n        movieName: [{\n          required: true,\n          message: \"请输入电影名称\",\n          trigger: \"blur\"\n        }],\n        type: [{\n          required: true,\n          message: \"请输入电影类型\",\n          trigger: \"blur\"\n        }],\n        actor: [{\n          required: true,\n          message: \"请输入电影演员\",\n          trigger: \"blur\"\n        }],\n        director: [{\n          required: true,\n          message: \"请输入电影导演\",\n          trigger: \"blur\"\n        }],\n        minS: [{\n          required: true,\n          message: \"请输入电影时长\",\n          trigger: \"blur\"\n        }],\n        movieDate: [{\n          required: true,\n          message: \"请输入电影上映日期\",\n          trigger: \"blur\"\n        }],\n        film: [{\n          required: true,\n          message: \"请输入电影链接\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    //重置查询表单\n    reset() {\n      this.queryMovie.movieName = '';\n      this.queryMovie.actor = '';\n      this.queryMovie.type = '';\n      this.getList();\n    },\n    //获取所有类别列表\n    async getTypes() {\n      const {\n        data: res\n      } = await this.$http.get(\"allTypes\");\n      this.typeOptions = res.data;\n      console.log(this.typeOptions);\n    },\n    //时间格式化\n    dateFormat(fmt, date) {\n      let ret = \"\";\n      date = new Date(date);\n      const opt = {\n        'Y+': date.getFullYear().toString(),\n        // 年\n        'm+': (date.getMonth() + 1).toString(),\n        // 月\n        'd+': date.getDate().toString(),\n        // 日\n        'H+': date.getHours().toString(),\n        // 时\n        'M+': date.getMinutes().toString(),\n        // 分\n        'S+': date.getSeconds().toString() // 秒\n        // 有其他格式化字符需求可以继续添加，必须转化成字符串\n      };\n      for (let k in opt) {\n        ret = new RegExp('(' + k + ')').exec(fmt);\n        if (ret) {\n          fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, '0'));\n        }\n      }\n      return fmt;\n    },\n    //获取所有电影列表\n    async getList() {\n      const {\n        data: res\n      } = await this.$http.get(\"allMovie\", {\n        params: this.queryMovie\n      });\n      this.movieList = res.data;\n      this.total = res.number;\n      console.log(this.movieList);\n    },\n    //最大数\n    handleSizeChange(newSize) {\n      this.queryMovie.pageSize = newSize;\n      this.getList();\n    },\n    //页面\n    handleCurrentChange(newPage) {\n      this.queryMovie.pageNum = newPage;\n      this.getList();\n    },\n    // 监听对话框\n    dialogClosed() {\n      this.$refs.formRef.resetFields(); // 重置表单项\n      this.form = {};\n    },\n    //添加电影\n    add() {\n      this.open = true;\n      this.title = '添加电影';\n    },\n    //修改用户\n    async edit(row) {\n      const id = row.id;\n      //发起请求\n      const {\n        data: res\n      } = await this.$http.get(\"getUpdateMovie?id=\" + id);\n      res.movieDate = this.dateFormat('YYYY-mm-dd ', res.movieDate);\n      this.form = res;\n      this.open = true;\n      this.title = '修改电影';\n    },\n    //提交按钮方法\n    submit() {\n      this.$refs.formRef.validate(async valid => {\n        if (!valid) return;\n        if (this.form.id != undefined) {\n          // 发起请求\n          const {\n            data: res\n          } = await this.$http.put(\"editMovie\", this.form);\n          if (res != \"success\") return this.$message.error(\"修改失败！！！\");\n          this.$message.success(\"修改成功！！！\");\n          //隐藏\n          this.open = false;\n          this.form = {};\n          this.getList();\n        } else {\n          // 发起请求\n          console.log(this.form);\n          const {\n            data: res\n          } = await this.$http.post(\"addMovie\", this.form);\n          if (res != \"success\") {\n            return this.$message.error(\"添加失败！！！\");\n          }\n          this.$message.success(\"添加成功！！！\");\n          //隐藏\n          this.open = false;\n          this.getList();\n        }\n      });\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.id);\n      this.names = selection.map(item => item.movieName);\n      this.isDisable = !selection.length;\n    },\n    //删除用户\n    async handleDelete(row) {\n      const ids = row.id || this.ids;\n      const names = row.movieName || this.names;\n      // 弹框\n      const confirmResult = await this.$confirm('是否确认删除名称为\"' + names + '\"的电影?', \"提示\", {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => err);\n      // 成功删除为confirm 取消为 cancel\n      if (confirmResult != 'confirm') {\n        this.$refs.multipleTable.clearSelection();\n        return this.$message.info(\"已取消删除\");\n      }\n      const {\n        data: res\n      } = await this.$http.delete(\"deleteMovie?id=\" + ids);\n      if (res != \"success\") {\n        return this.$message.error(\"删除失败！！！\");\n      }\n      this.$message.success(\"删除成功！！！\");\n      this.getList();\n    }\n  }\n};","map":{"version":3,"names":["data","typeOptions","isDisable","title","open","ids","names","formRules","movieName","required","message","trigger","type","actor","director","minS","movieDate","film","methods","reset","queryMovie","getList","getTypes","res","$http","get","console","log","dateFormat","fmt","date","ret","Date","opt","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","k","RegExp","exec","replace","length","padStart","params","movieList","total","number","handleSizeChange","newSize","pageSize","handleCurrentChange","newPage","pageNum","dialogClosed","$refs","formRef","resetFields","form","add","edit","row","id","submit","validate","valid","undefined","put","$message","error","success","post","handleSelectionChange","selection","map","item","handleDelete","confirmResult","$confirm","confirmButtonText","cancelButtonText","catch","err","multipleTable","clearSelection","info","delete"],"sources":["src/components/pages/shopping/ProductOrder.vue"],"sourcesContent":["<template>\n    <div>\n      <h3 style=\"margin-top: 0\">商品信息</h3>\n      <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n        <el-breadcrumb-item :to=\"{path:'/home'}\">首页</el-breadcrumb-item>\n        <el-breadcrumb-item>商品采购</el-breadcrumb-item>\n        <el-breadcrumb-item>商品信息</el-breadcrumb-item>\n      </el-breadcrumb>\n      <el-card>\n        <el-row :gutter=\"25\">\n          <el-form ref=\"queryForm\" :model=\"queryMovie\" label-width=\"80px\" :inline=\"true\">\n              <el-form-item label=\"商品名称\" prop=\"movieName\">\n                <el-input v-model=\"queryMovie.movieName\"></el-input>\n              </el-form-item>\n\n               <!-- 搜索框 -->\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"getList\" >搜索</el-button>\n              <el-button type=\"primary\" @click=\"reset\" >重置</el-button>\n            </el-form-item>\n          </el-form>\n        </el-row>\n\n\n        <el-table :data=\"movieList\" ref=\"multipleTable\"  border stripe  @selection-change=\"handleSelectionChange\">\n\n          <el-table-column type=\"selection\" width=\"55\"/>\n          <el-table-column type=\"index\" label=\"序号\"/>\n\n          <el-table-column label=\"电影名称\" prop=\"movieName\"/>\n          <el-table-column label=\"电影类别\" prop=\"type\"/>\n          <el-table-column label=\"演员\" prop=\"actor\" />\n          <el-table-column label=\"导演\" prop=\"director\"/>\n          <el-table-column label=\"电影时长\" prop=\"minS\"/>\n          <el-table-column label=\"上映时间\" prop=\"movieDate\">\n         \n          </el-table-column>\n          <el-table-column label=\"电影链接\" prop=\"film\"/>\n          <el-table-column label=\"操作\">\n            <template slot-scope=\"scope\">\n              <!-- 修改 -->\n              <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"edit(scope.row)\" ></el-button>\n              <!-- 删除 -->\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\"  @click=\"handleDelete(scope.row)\"></el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n    </div>\n  </template>\n  \n  <script>\n    export default {\n    \n      data(){\n        return{\n          //电影类别\n          typeOptions:[],\n          //批量删除是否禁用\n          isDisable :true,\n          //对话框标题\n          title:'',\n          //对话框\n          open :false,\n          //多选框选中id与username\n          ids :[],\n          names:[],\n     \n      \n          formRules: {\n            movieName: [\n              {required: true, message: \"请输入电影名称\", trigger: \"blur\"},\n            ],\n            type: [\n              {required: true, message: \"请输入电影类型\", trigger: \"blur\"},\n            ],\n            actor: [\n              {required: true, message: \"请输入电影演员\", trigger: \"blur\"},\n            ],\n            director: [\n              {required: true, message: \"请输入电影导演\", trigger: \"blur\"},\n            ],\n            minS: [\n              {required: true, message: \"请输入电影时长\", trigger: \"blur\"},\n            ],\n            movieDate: [\n              {required: true, message: \"请输入电影上映日期\", trigger: \"blur\"},\n            ],\n            film: [\n              {required: true, message: \"请输入电影链接\", trigger: \"blur\"},\n            ],\n          }\n        }\n      },\n      methods:{\n        //重置查询表单\n        reset(){\n          this.queryMovie.movieName = '';\n          this.queryMovie.actor = '';\n          this.queryMovie.type = '';\n          this.getList();\n        },\n        //获取所有类别列表\n        async getTypes(){\n          const {data:res} = await this.$http.get(\"allTypes\");\n          this.typeOptions = res.data;\n          console.log(this.typeOptions);\n        },\n        //时间格式化\n        dateFormat(fmt, date) {\n          let ret = \"\";\n          date = new Date(date);\n          const opt = {\n            'Y+': date.getFullYear().toString(), // 年\n            'm+': (date.getMonth() + 1).toString(), // 月\n            'd+': date.getDate().toString(), // 日\n            'H+': date.getHours().toString(), // 时\n            'M+': date.getMinutes().toString(), // 分\n            'S+': date.getSeconds().toString() // 秒\n            // 有其他格式化字符需求可以继续添加，必须转化成字符串\n          }\n          for (let k in opt) {\n            ret = new RegExp('(' + k + ')').exec(fmt)\n            if (ret) {\n              fmt = fmt.replace(\n                ret[1],\n                ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, '0')\n              )\n            }\n          }\n          return fmt;\n        },\n        //获取所有电影列表\n        async getList(){\n          const {data:res} = await this.$http.get(\"allMovie\",{params:this.queryMovie});\n          this.movieList = res.data;\n          this.total = res.number;\n          console.log(this.movieList);\n        },\n        //最大数\n        handleSizeChange(newSize){\n          this.queryMovie.pageSize = newSize;\n          this.getList();\n        },\n        //页面\n        handleCurrentChange(newPage){\n          this.queryMovie.pageNum = newPage;\n          this.getList();\n        },\n        // 监听对话框\n        dialogClosed(){\n          this.$refs.formRef.resetFields();// 重置表单项\n          this.form = {};\n        },\n        //添加电影\n        add(){\n          this.open = true;\n          this.title = '添加电影'\n        },\n        //修改用户\n        async edit(row){\n          const  id = row.id;\n          //发起请求\n          const {data:res} = await this.$http.get(\"getUpdateMovie?id=\"+id);\n          res.movieDate  = this.dateFormat('YYYY-mm-dd ',res.movieDate);\n          this.form = res;\n          this.open = true;\n          this.title = '修改电影';\n        },\n        //提交按钮方法\n        submit(){\n          this.$refs.formRef.validate(async valid =>{\n            if( !valid ) return;\n            if(this.form.id != undefined){\n              // 发起请求\n              const {data:res} = await this.$http.put(\"editMovie\",this.form);\n              if (res != \"success\") return this.$message.error(\"修改失败！！！\");\n              this.$message.success(\"修改成功！！！\");\n              //隐藏\n              this.open = false;\n              this.form = {};\n              this.getList();\n            }else{\n              // 发起请求\n              console.log(this.form);\n              const {data:res} = await this.$http.post(\"addMovie\",this.form);\n              if (res != \"success\") {\n                return this.$message.error(\"添加失败！！！\");\n              }\n              this.$message.success(\"添加成功！！！\");\n              //隐藏\n              this.open = false;\n              this.getList();\n            }\n          })\n        },\n        // 多选框选中数据\n        handleSelectionChange(selection) {\n          this.ids = selection.map(item => item.id);\n          this.names = selection.map(item => item.movieName);\n          this.isDisable = !selection.length;\n        },\n        //删除用户\n        async handleDelete(row){\n          const ids = row.id || this.ids;\n          const names= row.movieName || this.names;\n          // 弹框\n          const confirmResult = await this.$confirm('是否确认删除名称为\"' + names + '\"的电影?', \"提示\",  {\n            confirmButtonText: '确定',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }).catch(err => err)\n          // 成功删除为confirm 取消为 cancel\n          if(confirmResult!='confirm'){\n            this.$refs.multipleTable.clearSelection();\n            return this.$message.info(\"已取消删除\");\n          }\n          const {data:res} = await this.$http.delete(\"deleteMovie?id=\"+ids);\n          if (res != \"success\") {\n            return this.$message.error(\"删除失败！！！\");\n          }\n          this.$message.success(\"删除成功！！！\");\n          this.getList();\n        },\n      },\n    }\n  </script>\n  \n  <style lang=\"less\" scoped>\n    .el-breadcrumb{\n      margin-bottom: 15px;\n      font-size: 17px;\n    }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}